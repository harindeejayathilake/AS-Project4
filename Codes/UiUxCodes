import React, { Component } from 'react';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { getBills } from '../actions/userActions';

import Navbar from '../Components/HomeNavbar';
import Footer from '../Components/Footer';
import { Card, CardHeader, CardSubtitle, Container, Button, Progress, Spinner } from 'reactstrap';



class Bills extends Component {

    _isMounted = false;

    state={
        bills: [],
        status: [],
        max:[],
        value:[],
        loading: false
    }

    componentDidMount=()=>{
        this._isMounted = true;
        this.props.getBills().then(res=>{
            if(this._isMounted){
                let bills = res.bills;
                let status = [];
                let max = [];
                let value = [];

                for(let i=0; i<bills.length; i++){

                    max.push( bills[i].items.length + 2 );

                     //checking status and process
                     if(bills[i].accepted === true && bills[i].delivered === true){
                        status.push('Order has been sent');
                        value.push(max[i]);
                    }else if(bills[i].accepted === true && bills[i].delivered === false){
                        
                        let process = 1;

                        for(let j=0; j<bills[i].items.length; j++ ){
                            if(bills[i].items[i].ready){
                                process += 1;
                            }
                        }

                        if(process === (max[i]-1)){
                            status.push('Order is ready to move..');
                        }else{
                            status.push('Order is placed and processing..');
                        }

                        value.push(process)

                    }else{
                        status.push('Pending...');
                        value.push(0);
                    }

                }

                this.setState({bills: bills, status, max, value});
            }
        })
    }

    componentWillUnmount() {this._isMounted = false}


    render() {
        return (
            <div>
                <Navbar/>

                <Container style={{ marginTop: '80px'}} >

                    <h4 style={{textAlign: 'center', marginBottom: '30px'}} >Bills and Orders</h4>

                    {this.state.loading?
                        <section style={{display: 'flex', justifyContent: 'center'}} ><Spinner/></section>
                    :
                        <section style={{maxWidth:'600px', margin:'auto'}} >

                            {this.state.bills.length>0?

                                this.state.bills.map((bill, index)=>(
                                    <Card key={index} style={{marginBottom: '20px'}} >
                                        <CardHeader style={{padding: '20px', background: 'white', borderTop: '4px solid #298dff'}}>
                                           
                                            <div style={{display: 'flex', justifyContent: 'space-between', marginBottom: '5px', flexWrap: 'wrap'}} >
                                                <CardSubtitle><strong>Order ID:</strong> {bill._id}</CardSubtitle>
                                                {this.state.max[index] === this.state.value[index]?<Button size="sm"  color='danger' style={{padding: '2px 8px', borderRadius: '50%'}} >X</Button>: null }
                                            </div>

                                            <CardSubtitle style={{fontSize: '14px', marginBottom: '5px'}} >{`Date: ${bill.date}`}</CardSubtitle>
                                            <CardSubtitle style={{fontSize: '14px', marginBottom: '5px'}} >{`Amount: Rs. ${bill.total}`}</CardSubtitle>
                                            <CardSubtitle style={{fontSize: '14px', marginBottom: '5px'}} >Status: <strong>{this.state.status[index]}</strong></CardSubtitle>
                                            <Progress animated min={0} max={this.state.max[index]} value={this.state.value[index]} color='success' />
                                        </CardHeader>
                                    </Card>
                                ))
                                
                            
                        
                            :
                                <Card style={{marginBottom: '20px'}} >
                                    <CardHeader style={{padding: '20px', background: 'white'}}>
                                        <CardSubtitle style={{ marginBottom: '5px', textAlign: 'center'}}><strong>You have no bills !</strong></CardSubtitle>
                                    </CardHeader>
                                </Card>}

                            
                        </section>
                
                    }

                    

                </Container>
                
                <Footer/>
            </div>
        )
    }
}

export default withRouter(connect(null, {getBills})(Bills));


import React, { Component } from 'react';
import Navbar from '../Components/HomeNavbar';
import {connect} from 'react-redux';
import { Link, withRouter } from 'react-router-dom';
import { getBucket } from '../actions/authActions'
import { Container, Row, Col, Label, Card, CardTitle, CardText, CardBody, Spinner } from 'reactstrap';
import Footer from '../Components/Footer';


const qs = require('query-string');


class Buckets extends Component {
   
    _isMounted = false;

    state={
        loading: true,
        pending: [],
        processing: [],
        delivered: []
    }

    componentDidMount=()=>{
        this._isMounted = true;
        const parsed = qs.parse(window.location.search);
        this.props.getBucket(parsed.admin).then(res=>{

            let pending = [];
            let processing = [];
            let delivered = [];

            for(let i=0; i<res.bills.length; i++){
                if(res.bills[i].accepted === false){
                    pending.push(res.bills[i]);
                }else if( res.bills[i].accepted === true && res.bills[i].delivered === false){
                    
                    processing.push(res.bills[i]);
                }else if(res.bills[i].delivered === true){
                    delivered.push(res.bills[i])
                }
            }

            if(this._isMounted){
                this.setState({pending, processing, delivered, loading: false});
            }

        })
    }

    componentWillUnmount() {this._isMounted = false}
   


    render() {

        return (
            <div>
                <Navbar/>
                <Container style={{marginTop: '50px'}} >
                    <div style={{display: 'flex', flexDirection:'column', justifyContent:'center', alignItems:'center', marginBottom: '0px' }}>
                        <h2 style={{marginBottom: '50px'}}>Your Orders {this.state.loading?<Spinner size="lg" style={{marginBottom: '10px'}} /> : null } </h2>
                    </div>

                    
                        <Row>
                            <Col lg={4} >
                                <Label>Pending List</Label>
                                <div style={{marginTop: '20px'}}>
                                    {this.state.pending.length>0?
                                        this.state.pending.map((bill, index)=>(
                                            <Card style={{background: '#ffbebe', marginBottom: '10px'}} key={index} >
                                                <Link to={`/order-info?id=${bill._id}`} style={{color: 'black', textDecoration: 'none'}} >
                                                    <CardBody  >
                                                        <CardTitle style={{marginBottom: '0px'}}> <strong>{bill._id}</strong></CardTitle>
                                                        <CardText style={{marginBottom: '0', fontSize: '13px'}}>Amount: Rs. {bill.total} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>Date: {bill.date} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>No of Items: {bill.items.length} </CardText>
                                                    </CardBody>
                                                </Link>
                                            </Card>

                                        ))
                                    :
                                        <Card style={{background: '#ffef00'}}>
                                            <CardBody  >
                                                <CardText>No any orders found !</CardText>
                                            </CardBody>
                                        </Card>}
                                </div>
                            </Col>

                            <Col lg={4}>
                                <Label>Processing List</Label>
                                <div style={{marginTop: '20px'}}>
                                    {this.state.processing.length>0?
                                        this.state.processing.map((bill, index)=>(
                                            <Card style={{background: '#ffe396', marginBottom: '10px'}} key={index} >
                                               <Link to={`/order-info?id=${bill._id}`} style={{color: 'black', textDecoration: 'none'}} >
                                                    <CardBody  >
                                                        <CardTitle style={{marginBottom: '0px'}}> <strong>{bill._id}</strong></CardTitle>
                                                        <CardText style={{marginBottom: '0', fontSize: '13px'}}>Amount: Rs. {bill.total} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>Date: {bill.date} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>No of Items: {bill.items.length} </CardText>
                                                    </CardBody>
                                                </Link>
                                            </Card>

                                        ))
                                    :
                                        <Card style={{background: '#ffe396'}}>
                                            <CardBody  >
                                                <CardText>All the orders are deliverd !</CardText>
                                            </CardBody>
                                        </Card>}
                                </div>
                            </Col>

                            <Col lg={4} >
                                <Label>Delivered List</Label>
                                <div style={{marginTop: '20px', marginBottom: '50px'}}>
                                    {this.state.delivered.length>0?
                                        this.state.delivered.map((bill, index)=>(
                                            <Card style={{background: '#20c997'}} key={index} >
                                               <Link to={`/order-info?id=${bill._id}`} style={{color: 'black', textDecoration: 'none'}} >
                                                    <CardBody  >
                                                        <CardTitle style={{marginBottom: '0px'}}> <strong>{bill._id}</strong></CardTitle>
                                                        <CardText style={{marginBottom: '0', fontSize: '13px'}}>Amount: Rs. {bill.total} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>Date: {bill.date} </CardText>
                                                        <CardText style={{marginBottom: '2px', fontSize: '12px'}}>No of Items: {bill.items.length} </CardText>
                                                    </CardBody>
                                                </Link>
                                            </Card>

                                        ))
                                    :
                                        <Card style={{background: '#20c997'}}>
                                            <CardBody  >
                                                <CardText>Delivered orders list have been deleted !</CardText>
                                            </CardBody>
                                        </Card>}
                                </div>
                            
                            </Col>
                        </Row>

                </Container>
                <Footer/>
                
            </div>
        )
    }
}

export default withRouter(connect(null, {getBucket})(Buckets));


import React, { Component } from 'react';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { clearCart, deleteItemCart } from '../actions/userActions';

import Navbar from '../Components/HomeNavbar';
import Footer from '../Components/Footer';

import CartSummary from '../Components/CartSummary';
import { Button } from 'reactstrap';

class Cart extends Component {

    state={
        products: [1,2,3],
        isOpen: false
    }

    toggle=()=>{ console.log('here'); this.setState({isOpen: !this.state.isOpen})}

    clearCart=()=>{
        this.props.clearCart().then(res=>{
            window.location.reload();
        })
    }

    deleteItem=(id)=>{
        this.props.deleteItemCart(id).then(res=>{
            window.location.reload();
        })
    }


    render() {
        return (
            
            <main className="page shopping-cart-page">
                <Navbar/>
                <div className="container"  style={{background: 'white', boxShadow: '0 0 15px rgba(0,0,0,.1)', marginTop: '80px', padding:'0px'}}>
                    <div className="row no-gutters">
                        <div className="col-md-12 col-lg-8" style={{padding:'36px'}} >
                            
                            <div className="items">
                                {this.props.user.cart.length>0?
                                    this.props.user.cart.map((product, index)=>(

                                        <div className="product" key={index} style={{paddingBottom: '25px'}} >
                                            <div className="row justify-content-center align-items-center">

                                                <div className="col-md-3" >
                                                    <div className="product-image" style={{padding: '15px', border: '1px  #f0f0f0 solid'}} ><img className="img-fluid d-block mx-auto image" src={product.item.picture} alt={product.item.name} /></div>
                                                </div>

                                                <div className="col-md-5 product-info">
                                                    <a className="product-name" href={`showroom?item=${product.item._id}`} style={{fontSize: '18px', color: '#007bff', fontWeight: 'bold'}} >{product.item.name}</a>
                                                    <div className="product-specs">
                                                        <p style={{fontSize: '14px', color: 'grey'}}>{product.item.short_desc}</p>
                                                        <h6>{`Rs: ${product.item.price}`}</h6>
                                                        <Button size='sm' color='danger' style={{width: '100px'}} onClick={()=>this.deleteItem(product.item._id)} >Delete</Button>
                                                    </div>
                                                </div>

                                                <div className="col-6 col-md-2 quantity"><label className="d-none d-md-block" htmlFor="quantity">Quantity</label>{product.quantity}</div>
                                                <div className="col-6 col-md-2 price"><h4>{`Rs: ${product.quantity * product.item.price}`}</h4></div>
                                            </div>
                                        </div>

                                    ))
                            
                                :
                                <div style={{marginTop: '20px', textAlign: 'center'}} >
                                    <h4>Your cart is empty!</h4>
                                </div>}

                            </div>

                        </div>
                        
                        <div className="col-md-12 col-lg-4" style={{padding:'30px', background:'#dceaf8'}} >
                            <CartSummary cart={this.props.user.cart} toggle={this.toggle} clearCart={this.clearCart} />
                        </div>

                    </div>
                </div>

                
                <Footer/>
            </main>
        )
    }
}

const mapStateToProps = state => ({
    user: state.auth.user,
  });


export default withRouter(connect(mapStateToProps, {clearCart, deleteItemCart})(Cart));


import React from 'react';
import { Button, Form, FormGroup, Input, Label } from 'reactstrap';


import HomeNav from '../Components/HomeNavbar';
import Footer from '../Components/Footer';

export default function ContactUs() {
    return (
        <div>
            <HomeNav/>
               
               <div style={{textAlign: 'center', margin: '50px 0'}} >
                   <h3 >Contact us</h3>
                   <p>Feel free to contact us anytime you wish !</p>
               </div>

                <div style={{ display: 'flex', justifyContent: 'center'}} >
                   <div style={{ background: 'white', padding: '30px', width: '480px', boxShadow: '0 0 15px rgba(0,0,0,.1)', }} >
                        <h5 class="title" style={{fontWeight: 'bold'}} >Contact us</h5>
                        <hr/>

                        <Form>
                            <FormGroup>
                                <Label>Name</Label>
                                <Input type='text' />
                            </FormGroup>

                            <FormGroup>
                                <Label>Subject</Label>
                                <Input type='text' />
                            </FormGroup>

                            <FormGroup>
                                <Label>Email</Label>
                                <Input type='email' />
                            </FormGroup>

                            <FormGroup>
                                <Label>Message</Label>
                                <Input type='textarea' style={{height: '150px'}} />
                            </FormGroup>

                            <Button style={{background: '#007bff', marginTop: '30px'}} size="lg" block  >Send</Button>

                        </Form>
                    </div>
                </div>

            <Footer/>
        </div>
    )
}



import React from 'react';

import HomeNavBar from '../Components/HomeNavbar';
import Search from '../Components/Search';
import Cataloge from '../Components/Cataloge';
import Footer from '../Components/Footer';
import Cover from '../assests/cover.jpg';

export default function Home() {
    return (
        <div>
            <HomeNavBar/>
            <div>
                <img src={Cover} style={{width: '100%', }} alt="cover" />
            </div>
            <Search/>
            
            <Cataloge/>
            <Footer/>
            import React, { Component } from 'react';
import { Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, ModalFooter, Button, Spinner } from 'reactstrap';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { addSeller } from '../actions/authActions'


class AddSeller extends Component {
    state={
        name: '' ,
        tp: '' ,
        address: '' ,
        account_no: '',
        account_details: '' ,
        loading: false
    }


    onChange=(e)=>{this.setState({[e.target.name]: e.target.value})}

    onSubmit=()=>{
        this.setState({loading: true});
        this.props.addSeller({seller: this.state}).then(res=>{
            this.setState({loading: false});
            window.location.reload();
        })
    }

    render() {
        return (
            <Modal isOpen={this.props.show} toggle={this.props.toggle} >
                <ModalHeader toggle={this.props.toggle}>Add Seller</ModalHeader>
                <ModalBody>
                    <Form onSubmit={this.onSubmit}>
                        <FormGroup>
                            <Label>Name</Label>
                            <Input type='text' name='name' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Tp</Label>
                            <Input type='text' name='tp'  onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Address </Label>
                            <Input type='textarea' style={{height: '100px'}} name='address' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Account no</Label>
                            <Input type='text' name='account_no' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Account details  </Label>
                            <Input type='textarea' style={{height: '100px'}} name='account_details' onChange={this.onChange} required />
                        </FormGroup>
                    </Form>
                </ModalBody>

                <ModalFooter>
                    <Button color='success' onClick={this.onSubmit} >{this.state.loading? <Spinner size='sm' />:'Add Seller'}</Button>
                    <Button color='danger' onClick={this.props.toggle} >Cancel</Button>
                </ModalFooter>
            </Modal>
        )
    }
}

export default withRouter(connect(null, {addSeller})(AddSeller));

            
        </div>
    )
}


import React, { Component } from 'react';
import Navbar from '../Components/HomeNavbar'
import { Container, Col, Row, Spinner, Button } from 'reactstrap';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { getItemInfo, deleteItem } from '../actions/authActions';
import UpdateItem from '../Components/UpdateItem';
import Footer from '../Components/Footer';

const qs = require('query-string');



class ItemInfo extends Component {
    _isMounted = false;
    state ={
        item: null,
        deleting: false,
        show: false,
        loading: true
    }

    componentDidMount=()=>{
        this._isMounted = true;
        const parsed = qs.parse(window.location.search);
        if(parsed.id){
            this.props.getItemInfo(parsed.id).then(res=>{
                if(this._isMounted){
                    this.setState({item: res, loading: false})
                }
            })
        }
    }
    componentWillUnmount() {this._isMounted = false}


    AddItem=(item)=>{
        let items = this.state.items;
        items.push(item);
        this.setState({items})
    }

    deleteItem =()=>{
        this.setState({deleting: true})
        const parsed = qs.parse(window.location.search);
        this.props.deleteItem(parsed.id).then(res=>{
            if(res.success){
                this.setState({deleting: false});
                this.props.history.push('/dashboard/items');
                window.location.reload();
            }
        })
    }

    toggle=()=>{
        this.setState({show: !this.state.show});
    }


    render() {
        return (
            <div>
                <Navbar/>
                <Container style={{marginTop: '50px', marginBottom: '100px'}} >

                    {this.state.loading? <div style={{left: '50%', position: 'absolute'}} ><Spinner size="lg" /></div> : 

                        <Row style={{boxShadow: '0 0 15px rgba(0,0,0,.1)'}}>
                            <Col lg={8} style={{padding: '30px', background: 'white'}}>
                                <Row>
                                    <Col sm={6} style={{display:'flex', justifyContent: 'center'}} ><img src={this.state.item.picture} style={{width: '80%', marginBottom: '30px'}} alt={this.state.item.name} /></Col>
                                    <Col sm={6} >
                                        <h3>{this.state.item.name}</h3>
                                            <h4>{`Rs: ${this.state.item.price}`}</h4>
                                            <h5>{this.state.item.category}</h5>
                                            <h5>{this.state.item.qty}</h5>
                                            <hr/>
                                        <p >{this.state.item.short_desc}</p>
                                    </Col>
                                </Row>


                                <p style={{marginBottom: '30px'}} >{this.state.item.desc}</p>

                                {this.state.item.comments.map((comment)=>(
                                    <section style={{marginTop: '10px', background: '#dceaf8', padding: '20px', borderRadius: '1.2em'}} >
                                        <p style={{marginBottom: '0'}}><strong>{comment.user_name}</strong></p>
                                        <p>{comment.comment}</p>
                                    </section>
                                ))}

                                
                                
                            </Col>
                            <Col lg={4} style={{padding: '30px', background: '#dceaf8'}} >

                                <h4>Seller</h4>

                                <p style={{marginBottom: '0'}}><strong>Name : </strong> {this.state.item.seller.name}</p>
                                <p style={{marginBottom: '0'}}><strong>Tp : </strong> {this.state.item.seller.tp}</p>
                                <p style={{marginBottom: '0'}}><strong>Address : </strong> {this.state.item.seller.address}</p>
                                <p style={{marginBottom: '0'}}><strong>Account no : </strong> {this.state.item.seller.account_no}</p>
                                <p style={{marginBottom: '0'}}><strong>Account details : </strong> {this.state.item.seller.account_details}</p>

                                <hr/>
                                <h4>Auhtorized person</h4>

                                <p style={{marginBottom: '0'}}><strong>Name : </strong> {this.state.item.user.name}</p>
                                <p style={{marginBottom: '0'}}><strong>Tp : </strong> {this.state.item.user.tp}</p>
                                <p style={{marginBottom: '0'}}><strong>Email : </strong> {this.state.item.user.email}</p>
                                <p style={{marginBottom: '0'}}><strong>Address : </strong> {this.state.item.user.address}</p>

                                <Button color="danger" block style={{marginTop: '30px'}} onClick={this.deleteItem} > {this.state.deleting? <Spinner size='sm' /> : 'Delete Item' }</Button>
                                <Button color="warning" block onClick={this.toggle} > Update Item</Button>

                            </Col>
                            <UpdateItem show={this.state.show} toggle={this.toggle} item={this.state.item } />
                        </Row>
                        
                    }
                    
                    

                </Container>

               
                
                <Footer/>
            </div>
        )
    }
}

export default withRouter(connect(null, {getItemInfo, deleteItem})(ItemInfo));


import React, { Component } from 'react';
import Navbar from '../Components/HomeNavbar'
import { Container, Button, Row, Input, InputGroup, Card, CardText, CardBody, CardImg, CardTitle, CardSubtitle, Spinner} from 'reactstrap';
import {connect} from 'react-redux';
import { Link, withRouter } from 'react-router-dom';
import AddItem from '../Components/AddItem';
import Footer from '../Components/Footer';
import { getItems, getSellers } from '../actions/authActions'


class Items extends Component {
    _isMounted = false;
    state ={
        items: [],
        loading: true,
        show: false,
        seller_loading: false,
        sellers: [],
        search : []
    }

    componentDidMount=()=>{
        this._isMounted = true;
        if(this.props.items.length>0){
            this.setState({items: this.props.items, loading: false})
        }else{
            this.props.getItems().then(res=>{
                if(this._isMounted){
                    this.setState({items: this.props.items, loading: false})
                }
            })
        }
        
    }
    componentWillUnmount() {this._isMounted = false}

    toggle=()=>{
        this.setState({show: !this.state.show})
    }

    AddItem=()=>{
        this.setState({seller_loading: true})
        this.props.getSellers().then(res=>{
            this.setState({sellers: res, seller_loading: false});
            this.toggle();
        })
    }

    Searching =(e)=>{
        let results = [];
        if(e.target.value.length>0){
            results = this.state.items.filter((item)=> item.name.toLowerCase().indexOf(e.target.value.toLowerCase()) === 0)
        }
        this.setState({search: results});
    }


    render() {
       
        return (

            <div>
                <Navbar/>
                <Container style={{marginTop: '50px', marginBottom: '100px'}} >
                    <h2 style={{marginBottom: '50px', textAlign: 'center'}}>Items</h2>

                    <div style={{display: 'flex', justifyContent:'center', alignItems:'center', marginBottom: '40px', flexWrap:"wrap" }}>
                        <Button color='warning' block style={{width: '300px', marginBottom: '10px'}} onClick={this.AddItem} > {this.state.seller_loading? <Spinner size='sm' /> : 'Add New Item'} </Button>
                        <InputGroup style={{width: '400px', marginLeft: '20px', marginBottom: '10px'}} >
                            <Input placeholder='search item' onChange={this.Searching} />
                        </InputGroup>
                    </div>

                    <Row style={{display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center'}} >
                        {this.state.items.length>0 && this.state.search.length === 0 ? 
                        
                            this.state.items.map((items, index)=>(
                                <Link to={`/item-info?id=${items._id}`} key={index} style={{color: 'black', textDecoration: 'none'}}>
                                    <Card  style={{marginLeft: '20px', marginBottom: '30px', cursor: 'pointer', width:'200px' }}>
                                        <CardImg top style={{height: '180px', width: 'auto', padding: '20px 20px 0 20px'}} src={items.picture} alt='product image'/>
                                        <CardBody>
                                            <CardTitle>{items.name}</CardTitle>
                                            <CardSubtitle>RS: {items.price}</CardSubtitle>
                                            <CardText style={{fontSize: '14px', color: '#848080'}} >{items.short_desc}</CardText>
                                        </CardBody>
                                    </Card>
                                </Link>
                            ))
                        
                        
                        : this.state.search.length >0?

                            this.state.search.map((items, index)=>(
                                <Link to={`/item-info?id=${items._id}`} key={index} style={{color: 'black', textDecoration: 'none'}}>
                                    <Card  style={{marginLeft: '20px', marginBottom: '30px', cursor: 'pointer', width:'200px' }}>
                                        <CardImg top style={{height: '180px', width: 'auto', padding: '20px 20px 0 20px'}} src={items.picture} alt='product image'/>
                                        <CardBody>
                                            <CardTitle>{items.name}</CardTitle>
                                            <CardSubtitle>RS: {items.price}</CardSubtitle>
                                            <CardText style={{fontSize: '14px', color: '#848080'}} >{items.short_desc}</CardText>
                                        </CardBody>
                                    </Card>
                                </Link>
                            ))


                        :
                           <Card  style={{cursor: 'pointer', margin: 'auto' }}>
                                <CardBody>
                                    <CardTitle>No items found !</CardTitle>
                                </CardBody>
                            </Card>

                        }
                    </Row>

                </Container>
                
                <AddItem show={this.state.show} toggle={this.toggle} sellers={this.state.sellers} />
                <Footer/>
            </div>
        )
    }
}

const mapStateToProps = state => ({
    items: state.items.items,
  });
  
  

export default withRouter(connect(mapStateToProps, {getItems, getSellers})(Items));


import React, { Component } from 'react';
import Navbar from '../Components/HomeNavbar'
import { Container, Button, Row, Col, Label, Form, FormGroup, Input, ListGroup, ListGroupItem, ListGroupItemHeading, Spinner, Card, CardBody, CardSubtitle } from 'reactstrap';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { newOrder, getItems } from '../actions/authActions'


class NewOrder extends Component {
    _isMounted= false;

   state={
        all_items: [],
        search: [],
        loading: false,
        loading_order: false,

        name: '',
        address: '',
        tp: '',
        items: [],
        total: 0,

        search_item: '',
        addedItem: null,
        delivery:'',
   }


    componentDidMount=()=>{
        this._isMounted = true;
        this.setState({loading: true});
        this.props.getItems().then(res=>{
            if(this._isMounted){
                this.setState({all_items: res.items, loading: false})
            }
        })
    }
    componentWillUnmount=()=>{
        this._isMounted = false;
    }

   onChange=(e)=>{this.setState({[e.target.name]: e.target.value})}
   onSearching=(e)=>{
        let results = [];
        if(e.target.value.length>0){
            results = this.state.all_items.filter((item)=> item.code.indexOf(e.target.value) === 0)
        }
        this.setState({search: results})
   }

   addItem=(item)=>{this.setState({addedItem:item})}
   addToCart=()=>{
       let item = {
        code: this.state.addedItem.code,
        price: this.state.addedItem.price,
        delivery: this.state.delivery }

       let array = this.state.items;
       array.push(item);
        let total = 0;
        for(let i=0; i<array.length; i++){
            total +=  parseInt(array[i].price) + parseInt(array[i].delivery);
        }

       this.setState({items: array, delivery: '', addedItem: null, total})
   }

   placeOrder=()=>{
       if(this.state.name !== '' && this.state.items.length>0 && this.state.tp!==''){
           this.setState({loading_order: true});

            let order = {
                name: this.state.name,
                items: this.state.items,
                address: this.state.address,
                tp: this.state.tp,
                total: this.state.total
            }

            this.props.newOrder(order).then(res=> {this.setState({loading_order: false}); window.location.reload()})

       }
       
   }

    render() {
        return (
            <div>
                <Navbar/>
                <Container style={{marginTop: '50px', marginBottom: '100px'}} >
                    <div style={{display: 'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>
                        <h2 style={{marginBottom: '50px'}}>New Order</h2>
                    </div>

                    <Row>
                        <Col sm="3" ></Col>
                        {this.state.loading? <div style={{left: '50%', position: 'absolute'}} ><Spinner/></div>:
                        <Col style={{maxWidth: '500px'}} >
                            <Form>
                                <Label><strong>Customer Details</strong></Label><hr style={{marginTop: '0'}}/>
                                <FormGroup>
                                    <Input type='text' name='name' placeholder='Customer Name' onChange={this.onChange} />
                                </FormGroup>
                                <FormGroup>
                                    <Input type='textarea' style={{height: '100px'}} name='address' placeholder='Address to Deliver' onChange={this.onChange} />
                                </FormGroup>
                                <FormGroup>
                                    <Input type='text' name='tp' placeholder='Customer Phone' onChange={this.onChange} />
                                </FormGroup>
                                <br/>

                                <Label><strong>Shopping Cart</strong></Label><hr style={{marginTop: '0'}}/>
                                <Input type='text' name='search_item' placeholder='Search by item code' onChange={this.onSearching} />

                                {this.state.addedItem === null?
                                    <ListGroup style={{marginTop: '20px'}} >
                                    {this.state.search.length>0?
                                        this.state.search.map((item, index)=>(
                                            <ListGroupItem key={index} >
                                                <ListGroupItemHeading>{item.code}</ListGroupItemHeading>
                                                <div className="clearfix"  >
                                                    <p className="float-left" style={{marginBottom: '0'}}>{item.name}</p>
                                                    <p className="float-right" style={{marginBottom: '5'}}>RS: {item.price} </p>
                                                </div>
                                                <Button color='primary' size='sm' onClick={()=>this.addItem(item)} >Add Item</Button>
                                            </ListGroupItem>
                                        ))

                                    :null}

                                    </ListGroup>
                                :
                                    <Card style={{marginTop: '20px'}} >
                                        <CardBody>
                                            <div className="clearfix"  >
                                                <p className="float-left" style={{marginBottom: '0'}}>{this.state.addedItem.code}</p>
                                                <p className="float-right" style={{marginBottom: '0'}}>RS: {this.state.addedItem.price}</p>
                                            </div>
                                            <FormGroup row >
                                                <Label sm={6} bssize="sm">Delivery cost</Label>
                                                <Col sm={6}><Input type="text" name="delivery" placeholder="Rs: " bsSize='sm' onChange={this.onChange} /></Col>
                                            </FormGroup>

                                            <Button block color='success' onClick={this.addToCart} >Add to Cart</Button>
                                        </CardBody>
                                    </Card>}

                            </Form>

                            <Card style={{marginTop: '20px'}}>
                                <CardBody>
                                    <CardSubtitle>Bill</CardSubtitle><hr/>
                                    

                                    {this.state.items.length>0? 
                                        this.state.items.map((item, index)=>(
                                            <div style={{marginBottom: '5px'}} key={index} >
                                                <div className="clearfix"  >
                                                    <p className="float-left" style={{marginBottom: '0'}}>{item.code}</p>
                                                    <p className="float-right" style={{marginBottom: '0'}}>RS: {item.price}</p>
                                                </div>
                                                <div className="clearfix"  >
                                                    <p className="float-left" style={{marginBottom: '0', fontSize: '12px'}}>Delivery cost</p>
                                                    <p className="float-right" style={{marginBottom: '0', fontSize: '12px'}}>RS: {item.delivery}</p>
                                                </div>
                                                <hr/>
                                            </div>
                                        ))
                                    :null}


                                    <div className="clearfix"  >
                                        <p className="float-left" style={{marginBottom: '0'}}><strong>Total</strong></p>
                                        <p className="float-right" style={{marginBottom: '0'}}><strong>RS: {this.state.total}</strong></p>
                                    </div>
                                
                                    
                                </CardBody>
                            </Card>

                                        <Button color='success' block style={{marginTop: '20px'}} onClick={this.placeOrder} >{this.state.loading_order?'wait...': 'Place Order'}</Button>

                        </Col>}
                        
                        <Col sm="3"></Col>
                    </Row>

                </Container>
                
            </div>
        )
    }
}

export default withRouter(connect(null, {getItems, newOrder})(NewOrder));

import React, { Component } from 'react';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { buyNow } from '../actions/userActions';
import { Alert, Button, Modal, ModalBody } from 'reactstrap';

class BuyNow extends Component {

    state={
        account_no: '',
        exp_m: '',
        exp_d:'',
        account_name:'',
        cvc:'',
        valid:null
    }

    onChange=(e)=>{this.setState({[e.target.name]: e.target.value})};

    payCart=()=>{
        this.setState({valid: null});
        if(this.state.account_no.length>0 && this.state.exp_m.length>0 && this.state.exp_d.length>0 && this.state.account_name.length>0 && this.state.cvc.length>0){
            this.props.buyNow(this.props.payment).then(res=>{
                window.location.reload();
            })
        }else{
            this.setState({valid: 'Invalid Credrentials !'})
        }
       
    }

    onSubmit=(e)=>{
        e.preventDefault();
    }

    render() {
        return (
            <Modal className="checkout-payment" isOpen={this.props.isOpen} toggle={this.props.toggle} >
                <ModalBody className="checkout" style={{borderTop: '4px solid #298dff'}} >
                    <h5 className="title" style={{fontWeight: 'bold'}} >Checkout</h5>
                    <hr/>

                    <div className="item" style={{marginBottom: '16px'}}>
                        <p className="item-name" style={{fontWeight: 'bold', marginBottom: '0'}} >Billing Name</p>
                        <p className="item-description" style={{fontSize: '14px', color: 'grey', marginBottom: '0'}} >{this.props.name}</p>
                    </div>

                    <div className="item" style={{marginBottom: '16px'}}>
                        <p className="item-name" style={{fontWeight: 'bold', marginBottom: '0'}} >Billing Address</p>
                        <p className="item-description" style={{fontSize: '14px', color: 'grey', marginBottom: '0'}} >{this.props.address}</p>
                    </div>

                    <hr/>

                    <div className="item">
                        <p className="item-name" style={{fontWeight: 'bold', marginBottom: '0'}} >{`Total  ${this.props.total}`}</p>
                    </div>

                </ModalBody>

                <ModalBody className="payment" >
                    <h5 className="title" style={{fontWeight: 'bold'}} >Credit Card Details</h5>
                    <hr/>
                    <form className="form-row" onSubmit={this.onSubmit} >
                        <div className="col-sm-7">
                            <div className="form-group"><label htmlFor="card-holder">Card Holder</label><input required className="form-control" type="text" placeholder={this.props.name} name="account_name" onChange={this.onChange} /></div>
                        </div>
                        <div className="col-sm-5">
                            <div className="form-group"><label>Expiration date</label>
                                <div className="input-group expiration-date"><input required className="form-control" type="text" placeholder="MM" name="exp_m" onChange={this.onChange} /><input required className="form-control" type="text" placeholder="YY" name="exp_d" onChange={this.onChange} /></div>
                            </div>
                        </div>
                        <div className="col-sm-8">
                            <div className="form-group"><label htmlFor="card-number">Card Number</label><input className="form-control" type="text" id="card-number" placeholder="Card Number" name="account_no" onChange={this.onChange} required /></div>
                        </div>
                        <div className="col-sm-4">
                            <div className="form-group"><label htmlFor="cvc">CVC</label><input required className="form-control" type="text" id="cvc" placeholder="CVC" name="cvc" onChange={this.onChange} /></div>
                        </div>
                        
                        <Button type="submit" onClick={this.payCart} style={{background: '#007bff', marginTop: '20px'}} size="lg" block   >Proceed</Button>
                    
                        {this.state.valid !== null?  <Alert style={{marginTop: '10px', width: '100%'}} color='danger' >{this.state.valid}</Alert> :null}
                    </form>
                </ModalBody>
            </Modal>
        )
    }
}



export default withRouter(connect(null, {buyNow})(BuyNow));


import React, { Component } from 'react';
import { Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, ModalFooter, Button, Spinner, Alert } from 'reactstrap';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { storage } from '../assests/firebase';
import { addItem } from '../actions/authActions'


class AddItem extends Component {
    state={
        name:'',
        price: '',
        short_desc: '',
        desc: '',
        category: '',
        picture: '',
        image: null,
        seller: '',
        qty: '',
        loading: false,
        valid: null,
    }

    onChange=(e)=>{this.setState({[e.target.name]: e.target.value})}

    onSubmit=()=>{
        this.setState({loading: true, valid: null});
        if(this.state.name.length>0 && this.state.price.length>0 && this.state.desc.length>0 && this.state.category.length>0 && this.state.seller.length >0){
            this.setState({loading: true, price: parseInt(this.state.price), qty: parseInt(this.state.qty) });
            let extention = this.state.image.name.split('.').pop();
            let filename = `${this.state.name}_${Date.now()}.${extention}`;
            const upload = storage.ref(`images/${filename}`).put(this.state.image);
            upload.on('state_changed', 
            ()=>{
    
            }, 
            ()=>{
                this.setState({valid: "Error in picture uploading!"})
            },
            ()=>{
                storage.ref('images').child(filename).getDownloadURL().then(url =>{
                    this.setState({picture: url});
                    this.props.addItem({item: this.state}).then(res=>{
                        this.setState({loading: false});
                        window.location.reload();
                    })
                })
            });

        }else{
            this.setState({valid: "Please enter all fields.!", loading: false})
        }
    }

    onPictureUpload=(e)=>{
        if(e.target.files[0]){
            const image = e.target.files[0];
            this.setState({image})
        }
    }

    render() {
        return (
            <Modal isOpen={this.props.show} toggle={this.props.toggle} >
                <ModalHeader toggle={this.props.toggle}>Add Item</ModalHeader>
                <ModalBody>
                    <Form onSubmit={this.onSubmit}>
                        <FormGroup>
                            <Label>Name</Label>
                            <Input type='text' name='name' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Price</Label>
                            <Input type='text' name='price' placeholder='RS: ' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Description</Label>
                            <Input type='textarea' style={{height: '100px'}} name='desc' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Short Description</Label>
                            <Input type='textarea' style={{height: '50px'}} name='short_desc' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Category</Label>
                            <Input type='text' name='category' onChange={this.onChange} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Picture</Label>
                            <Input type='file'  name='picture' placeholder='link of the picture' onChange={this.onPictureUpload} required />
                        </FormGroup>
                        <FormGroup>
                            <Label>Seller</Label>
                            <Input type='select' name='seller'  onChange={this.onChange} required>
                                <option value=''>select</option>
                                {this.props.sellers.map((seller, index)=>(
                                    <option key={index} value={seller._id} >{seller.name}</option>
                                ))}
                            </Input>
                        </FormGroup>
                        <FormGroup>
                            <Label>Initial Quantity</Label>
                            <Input type='text' name='qty' onChange={this.onChange} required/>
                        </FormGroup>

                    </Form>
                </ModalBody>

                <ModalFooter>
                    <Button color='success' onClick={this.onSubmit} >{this.state.loading? <Spinner size='sm' />:'Add Item'}</Button>
                    <Button color='danger' >Cancel</Button>
                    {this.state.valid!==null? <Alert color='danger' >{this.state.valid}</Alert>:null}
                </ModalFooter>
            </Modal>
        )
    }
}

//simple changes

export default withRouter(connect(null, {getSellers, getSellerItems, deleteSeller})(SellersInfo));


import React, { Component } from 'react';
import {connect} from 'react-redux';
import { withRouter } from 'react-router-dom';
import { getOrderInfo, updateOrder, updateOrderByItem } from '../actions/authActions';

import Navbar from '../Components/HomeNavbar';
import Footer from '../Components/Footer';

import { Button, CardBody, Progress, Spinner, Card, CardText } from 'reactstrap';

const qs = require('query-string');

class OrderInfo extends Component {

    _isMounted = false;
    state={
        max: 0,
        value: 0,
        status: '',
        order: null,
        ready_items: [],
        loading: true
    }

    componentDidMount=()=>{
        this._isMounted = true;
        const parsed = qs.parse(window.location.search);
        this.props.getOrderInfo(parsed.id).then(res=>{
            let max = res.items.length + 2;
            let value = 0;
            let ready_items = [];
            let status = '';
            let items = res.items;

            
            if(res.accepted=== true && res.delivered === true){
                status = 'Order has been sent!'
                value = max;
                
            }else if(res.accepted=== true && res.delivered === false){
                
                value =1;
                
                for(let i =0 ; i<items.length; i++){
                    if(items[i].ready){
                        ready_items.push(1);
                        value += 1;
                    }else{
                        ready_items.push(0);
                    }
                }

                if(value === max-1){
                    status = 'Order is ready to move..'
                }else{
                    status = 'Order is processing..'
                }

            }else{
                status = 'Pending..'
                value = 0;
            }

            if(this._isMounted){
                this.setState({order: res, max, value, status, ready_items, loading: false})
            }

        })
    }
    componentWillUnmount() {this._isMounted = false}

    updateOrder=(update)=>{
        this.props.updateOrder( this.state.order._id, update).then(res=>{
            this.setState({value: (this.state.value+1)})
        });
    }

    acceptOrder=()=>{
        this.updateOrder({update:{accepted: true}});
    }

    sendOrder=()=>{
        this.updateOrder({update:{delivered: true}});
    }

    updateOrderByItem = (id)=>{
        this.props.updateOrderByItem({order_id: this.state.order._id, item_id:id}).then(res=>{
            window.location.reload();
        })
    }



    render() {
        const {order} = this.state;

        return (
            
            <main className="page shopping-cart-page">
                <Navbar/>
                <div className="container"  style={{background: 'white', boxShadow: '0 0 15px rgba(0,0,0,.1)', marginTop: '80px', padding:'0px'}}>
                    <div className="row no-gutters">
                        <div className="col-md-12 col-lg-8" style={{padding:'36px'}} >
                            {this.state.loading?
                                <section style={{display: 'flex', justifyContent: 'center'}} ><Spinner/></section>
                            :
                                <section>
                                    <div>
                                        <h5>Order Id: {order._id}</h5>
                                        <h6>Date: {order.date}</h6>
                                        <h6>Total Amount: Rs. {order.total}</h6>
                                        <h6>Status: {this.state.status} </h6>
                                        <Progress animated min={0} max={this.state.max} value={this.state.value} color='success' />
                                    </div>
                                    <hr/>
                                    
                                    <div className="items">
                                        <h6>Items: </h6>
                                        
                                        {order.items.length>0?
                                            order.items.map((item, index)=>(

                                                <div className="product" key={index} style={{paddingBottom: '25px'}} >
                                                    <div className="row justify-content-center align-items-center">

                                                        <div className="col-md-3" >
                                                            <div className="product-image" style={{padding: '15px', border: '1px  #f0f0f0 solid'}} ><img className="img-fluid d-block mx-auto image" src={item.item.picture} alt={item.item.name} /></div>
                                                        </div>

                                                        <div className="col-md-5 product-info">
                                                            <a className="product-name" href={`/item-info?id=${item.item._id}`} style={{fontSize: '18px', color: '#007bff', fontWeight: 'bold'}} >{item.item.name}</a>
                                                            <div className="product-specs">
                                                                <p style={{fontSize: '14px', color: 'grey'}}> {item.item.short_desc} </p>
                                                                <h6>{`Rs: ${item.item.price}`}</h6>
                                                                {this.state.value===0?
                                                                   null
                                                                :(this.state.ready_items[index] === 1) || (this.state.max === this.state.value) ?
                                                                    <Button disabled size='sm' color='warning' style={{width: '100px'}} onClick={()=>this.deleteItem('product.item._id')} >Completed</Button>
                                                                :
                                                                    <Button size='sm' color='success' style={{width: '100px'}} onClick={()=>this.updateOrderByItem(item._id)} >Ready</Button>
                                                                }

                                                            </div>
                                                        </div>

                                                        <div className="col-6 col-md-2 quantity"><label className="d-none d-md-block" htmlFor="quantity">Quantity</label> {item.quantity} </div>
                                                        <div className="col-6 col-md-2 price"><h4>{item.item.price * item.quantity } </h4></div>
                                                    </div>
                                                </div>

                                            ))
                                    
                                        :null}

                                    </div>

                                </section>
                            
                            }
                            
                        </div>
                        
                        <div className="col-md-12 col-lg-4" style={{padding:'30px', background:'#dceaf8'}} >
                            {this.state.loading?
                                <section style={{display: 'flex', justifyContent: 'center'}} ><Spinner/></section>
                            :
                                <section>
                                    <h3 style={{textAlign: 'center', fontSize: '1.5em', fontWeight: 'bold', padding: '16px 0 28px 0', color: '#1d4f88' }} >User Information</h3>

                                    <Card>
                                        <CardBody style={{borderTop: '2px solid #298dff'}} >
                                            <CardText><strong>Name:</strong> {order.user.name} </CardText>
                                            <CardText><strong>Address:</strong> {order.user.address} </CardText>
                                            <CardText><strong>Tp:</strong> {order.user.tp} </CardText>
                                            <CardText><strong>Email:</strong> {order.user.email} </CardText>
                                        </CardBody>
                                    </Card>

                                    <hr/>

                                    {this.state.value===0?
                                        <Button style={{background: '#007bff'}} size="lg" block onClick={this.acceptOrder} >Accept</Button>
                                    :this.state.value===this.state.max-1?
                                        <Button color='warning' size="lg" block onClick={this.sendOrder} >Send Order</Button>
                                    :(this.state.max - this.state.value - 1) === 1?
                                        <h5>Only 1 item is waiting</h5> 
                                    :this.state.max - this.state.value === 0?
                                        <h5>Order has sent!</h5>
                                    :
                                        <h5> {`${this.state.max - this.state.value - 1} items are waiting`} </h5>
                                    }
                                    
                                </section>
                            
                            }

                           
                        </div>

                    </div>
                </div>

                
                <Footer/>
            </main>
        )
    }
}

const mapStateToProps = state => ({
    user: state.auth.user,
  });


export default withRouter(connect(mapStateToProps, {getOrderInfo, updateOrder, updateOrderByItem})(OrderInfo));

