const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const config = require('config');
const jwt = require('jsonwebtoken');
const auth = require('../../middleware/auth');
const isAdmin = require('../../middleware/isAdmin');
 
//User Model
 const Bill = require('../../models/Bill');
 const User = require('../../models/User');


//authenticate the user
router.post('/', (req, res)=>{
    const {email, password} = req.body;

    User.findOne({email}).then(user =>{
        if(!user) return res.status(400).json({msg : 'User does not exist'});

        bcrypt.compare(password, user.password).then(isMatch =>{
            if(!isMatch) return res.status(400).json({msg: 'Invalid credentials'});
            jwt.sign( {id: user.id, admin: user.admin}, config.get('jwtSecret'), (err, token)=>{
                if(err) throw err;
       
                if(user.admin){
                    Bill.find().sort({date: -1}).then(bills =>{
                        res.json({token, bills, admin:user.admin, success: true})
                    })
                }else{
                    res.json({name: user.name, admin:user.admin, token, success: true})
                }               
            })
        })
    }) 
});

//create user
router.post('/register', (req, res)=>{
    const {name, email, password, address} = req.body;

    if(!email || !password || !name) return res.status(400).json({msg: 'Please enter all fields'});

    User.findOne({email}).then(user =>{
        if(user) return res.json({success: false})

        const newUser = new User({name, email, password, address});
     
        //create salt & hash
        bcrypt.genSalt(10, (err, salt)=>{
            bcrypt.hash(newUser.password, salt, (err, hash)=>{
                if(err) throw err;
                newUser.password = hash;
                newUser.save().then(user =>{
                    jwt.sign( {id: user.id, admin: user.admin}, config.get('jwtSecret'), (err, token)=>{
                        if(err) throw err;
                        res.json({name: user.name, token, success: true})              
                    })
                })
                .catch(err=> res.json({success: false}));
            })
        })
        
    })
})

//get user data
router.get('/user', auth, (req, res)=>{
    User.findById(req.user.id).select('-password -account_details -account_no').populate('cart.item')
    .then(user=>{
        if(user.admin){
            Bill.find().sort({date: -1}).then(bills =>{
                res.json({bills, admin: user.admin, success: true})
            })
        }else{
            res.json(user)
        }    
    })
})

//get all admins
router.get('/admins', (req, res)=>{
    User.find({admin: true}).select(['name', '_id']).then(admins=>{
        res.json(admins);
    })
})

module.exports =  router;

const express = require('express');
const router = express.Router();
const auth = require('../../middleware/auth');
const isAdmin = require('../../middleware/isAdmin');
const { update } = require('../../models/Bill');

const Bill = require('../../models/Bill');
const Item = require('../../models/Item');
const Seller = require('../../models/Seller');



module.exports =  router;

// ** Orders ** //

//get orders
router.get('/orders', auth, isAdmin, (req, res)=>{
    Bill.find().sort({date: -1})
    .then(bills=>{
        if(bills){
            res.json(bills);
        }else{
            res.json({bills: []})
        }
    })
})

//get order
router.get('/orders/:id', auth, isAdmin, (req, res)=>{
    Bill.findById(req.params.id).populate(['items.item', 'user']).then(bill=>{
        res.json(bill);
    })
})

//update order
router.put('/orders/:id', auth, isAdmin, (req, res)=>{
    const {update} = req.body;
    Bill.findByIdAndUpdate(req.params.id, {$set: update}, {new: true})
    .then(()=>res.json({success: true}));
})

//update order by item (ready)
router.post('/orders', auth, isAdmin, (req, res)=>{
    const {order_id, item_id} = req.body;
    Bill.findById(order_id).then(order=>{

        let item_index = 0;

        order.items.map((item, index)=>{
            if(item_id.match(item._id)){
                item.ready = true;
            }
        })

        order.save().then(order=>{
            res.json({success: true})
        })

    })
})

//delete order
router.delete('/orders/:id', auth, isAdmin, (req, res)=>{
    Bill.findByIdAndRemove(req.params.id).then(()=>{
        res.json({success: true});
    })
})

//get orders by user (remaining)
router.get('/orders/bucket/:admin', auth, isAdmin, (req, res)=>{
    const admin = req.params.admin;

    Bill.find().populate(['user', 'items.item']).then(orders=>{
        let bills = [];
        orders.map(( order )=>{
            order.items.map(items=>{
                if(admin.match(items.item.user)){
                    if(bills.indexOf(order) === -1 ){
                        bills.push(order)
                    }
                }
            })
        });
        
        res.json({bills})
    })
    
})



// ** Sellers ** //

//get seller-items
router.get('/seller-items/:id', auth, isAdmin, (req, res)=>{
    Item.find({seller:req.params.id})
    .select(['name', '_id'])
    .then(items=>{
        res.json(items)
    })
})

//get sellers
router.get('/seller', auth, isAdmin, (req, res)=>{
    Seller.find().then(sellers=>{
        if(sellers){
            res.json(sellers)
        }else{
            res.json({sellers: null})
        }
    })
})

//add seller
router.post('/seller', auth, isAdmin, (req, res)=>{
    const { seller } = req.body;
    const newSeller = new Seller(seller);
    newSeller.save().then(seller=>{
        res.json({success:true, seller})
    })
})

//update seller
router.put('/seller', auth, isAdmin, (req, res)=>{
    const { seller_id, update } = req.body;
    Seller.findByIdAndUpdate(seller_id, {$set: update}, {new:true})
    .then(seller=>res.json({seller, success: true}))
})

//delete seller ------------------------------------------------------------------------------
router.delete('/seller/:id', auth, isAdmin, (req, res)=>{

    Seller.findByIdAndRemove(req.params.id)
    .then(()=>{

        //remove seller's items --------------------------------------------------------------
        res.json({success:true})
    })
})



// ** Items ** //

//get Item
router.get('/item/:id', auth, isAdmin, (req, res)=>{
    Item.findById(req.params.id).populate(['seller', 'user'])
    .then(item=>res.json(item))
    .catch(err=>console.log(err))
})

//add item
router.post('/item', auth, isAdmin, (req, res)=>{

    const { item } = req.body;
    item.user = req.user.id;
    
    const newItem = new Item(item);
    newItem.save().then(item=>{
        res.json({id: item._id, success:true})
    })
})

//update item
router.put('/item', auth, isAdmin, (req, res)=>{
    const { item_id, update } = req.body;
    Item.findByIdAndUpdate(item_id, {$set: update}, {new:true})
    .then(item=>res.json({item, success: true}))
})

//delete item
router.delete('/item/:id', auth, isAdmin, (req, res)=>{
    Item.findByIdAndRemove(req.params.id)
    .then(()=>res.json({success:true}))
})

const express = require('express');
const mongoose = require('mongoose');
const config = require('config');
//const fileUpload = require('express-fileupload');
//const nocache = require('nocache');
const http =  require('http');
//var enforce = require('express-sslify');

const app = express();
const server = http.createServer(app);
//app.use(enforce.HTTPS({trustProtoHeader: true, trustXForwardedHostHeader: true}));

const users = require('./routes/api/users');
const items = require('./routes/api/items');
const admin = require('./routes/api/admin');
const auth = require('./routes/api/auth');

//Bodyparser Middleware
app.use(express.json());
//app.use(nocache());[]

//DB config
const db = config.get('mongoURI');
//Connect to DB
const dbConnect = mongoose.connect(db, { useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true , useFindAndModify: false }).catch(err => console.log(err));

if(dbConnect){
    console.log("connected");
}

//Use routes

//app.use(fileUpload());
app.use('/users', users);
app.use('/items', items);
app.use('/admin', admin);
app.use('/auth', auth);

//app.use('/uploads', express.static('uploads'));


if(process.env.NODE_ENV === 'production'){
    app.use(express.static('client/build'));
    app.use('*', express.static('client/build'));
    app.get('*', (req, res) => {
        res.sendFile(path.resolve(__dirname, 'client', 'build', 'index.html'))
    });
}
const port = process.env.PORT || 5000;

//app.listen(port, () => console.log(`server started on port ${port}`));
server.listen(port, () => console.log(`Server started: ${port}`));

const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const config = require('config');
const jwt = require('jsonwebtoken');
const auth = require('../../middleware/auth');
const isAdmin = require('../../middleware/isAdmin');
 
//User Model
 const Bill = require('../../models/Bill');
 const User = require('../../models/User');


//authenticate the user
router.post('/', (req, res)=>{
    const {email, password} = req.body;

    User.findOne({email}).then(user =>{
        if(!user) return res.status(400).json({msg : 'User does not exist'});

        bcrypt.compare(password, user.password).then(isMatch =>{
            if(!isMatch) return res.status(400).json({msg: 'Invalid credentials'});
            jwt.sign( {id: user.id, admin: user.admin}, config.get('jwtSecret'), (err, token)=>{
                if(err) throw err;
       
                if(user.admin){
                    Bill.find().sort({date: -1}).then(bills =>{
                        res.json({token, bills, admin:user.admin, success: true})
                    })
                }else{
                    res.json({name: user.name, admin:user.admin, token, success: true})
                }               
            })
        })
    }) 
});

//create user
router.post('/register', (req, res)=>{
    const {name, email, password, address} = req.body;

    if(!email || !password || !name) return res.status(400).json({msg: 'Please enter all fields'});

    User.findOne({email}).then(user =>{
        if(user) return res.json({success: false})

        const newUser = new User({name, email, password, address});
     
        //create salt & hash
        bcrypt.genSalt(10, (err, salt)=>{
            bcrypt.hash(newUser.password, salt, (err, hash)=>{
                if(err) throw err;
                newUser.password = hash;
                newUser.save().then(user =>{
                    jwt.sign( {id: user.id, admin: user.admin}, config.get('jwtSecret'), (err, token)=>{
                        if(err) throw err;
                        res.json({name: user.name, token, success: true})              
                    })
                })
                .catch(err=> res.json({success: false}));
            })
        })
        
    })
})

//get user data
router.get('/user', auth, (req, res)=>{
    User.findById(req.user.id).select('-password -account_details -account_no').populate('cart.item')
    .then(user=>{
        if(user.admin){
            Bill.find().sort({date: -1}).then(bills =>{
                res.json({bills, admin: user.admin, success: true})
            })
        }else{
            res.json(user)
        }    
    })
})

//get all admins
router.get('/admins', (req, res)=>{
    User.find({admin: true}).select(['name', '_id']).then(admins=>{
        res.json(admins);
    })
})

module.exports =  router;